# -*- coding: utf8 -*-
'''
# PROBLEM 29

Consider all integer combinations of a**b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2**2=4, 2**3=8, 2**4=16, 2**5=32
3**2=9, 3**3=27, 3**4=81, 3**5=243
4**2=16, 4**3=64, 4**4=256, 4**5=1024
5**2=25, 5**3=125, 5**4=625, 5**5=3125
If they are then placed in numerical order, with any repeats removed, we get
the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a**b for 2 ≤ a ≤ 100
and 2 ≤ b ≤ 100?
'''
import math


def logb(base, x):
    return math.log(x) / math.log(base)


def get_distinct_powers(maximum, minimum=2):
    greatests = {}
    result = 0

    for a in range(minimum, maximum + 1):
        num_min = minimum
        for key in greatests.keys():
            if not logb(key, a).is_integer():
                continue
            m = int(math.ceil(logb(a, greatests[key])))
            num_min = m if m >= num_min else num_min
            print key, a
        # count = maximum - num_min + 1
        result += maximum - num_min + 1
        greatests[a] = a ** maximum
    return result


def brute_force(maximum, minimum=2):
    uniques = []
    for a in range(minimum, maximum + 1):
        for b in range(minimum, maximum + 1):
            r = a ** b
            if r in uniques:
                continue
            uniques.append(r)
    return len(uniques)


print(get_distinct_powers(5))
print(get_distinct_powers(100))
# print(brute_force(5))
# print(brute_force(100))  # 9183
